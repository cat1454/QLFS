package OrderView;

import database.DataBaseConfig;
import model.CartItem;
import service.CartService;
import utils.AuthUtils;
import utils.OrderUtils;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.*;
import java.util.List;

public class CartView extends JPanel {
    private JTable cartTable;
    private DefaultTableModel tableModel;
    private JLabel totalLabel;
    private JButton deleteButton, orderButton;
    private List<CartItem> cartItems;

    public CartView() {
        this.cartItems = CartService.getInstance().getCartItems();
        initUI();
    }

   // Thay th·∫ø ph·∫ßn initUI() trong CartView b·∫±ng code n√†y:

private void initUI() {
    setLayout(new BorderLayout());

    // Th√™m c·ªôt Product ID ƒë·ªÉ tr√°nh l·ªói mapping
    String[] columnNames = {"Ch·ªçn", "Product ID", "T√™n s·∫£n ph·∫©m", "S·ªë l∆∞·ª£ng", "ƒê∆°n gi√°", "Th√†nh ti·ªÅn"};
    tableModel = new DefaultTableModel(columnNames, 0) {
        @Override
        public Class<?> getColumnClass(int column) {
            if (column == 0) return Boolean.class;
            if (column == 1) return Integer.class;
            if (column == 3 || column == 4 || column == 5) return Double.class;
            return String.class;
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return column == 0 || column == 3; // Cho ph√©p ch·ªçn checkbox v√† s·ª≠a s·ªë l∆∞·ª£ng
        }
        
        // FIX: Override setValueAt ƒë·ªÉ x·ª≠ l√Ω khi user thay ƒë·ªïi gi√° tr·ªã
        @Override
        public void setValueAt(Object value, int row, int column) {
            if (column == 3) { // C·ªôt s·ªë l∆∞·ª£ng
                try {
                    int newQuantity = 0;
                    if (value instanceof Integer) {
                        newQuantity = (Integer) value;
                    } else {
                        newQuantity = Integer.parseInt(value.toString());
                    }
                    
                    // Validate s·ªë l∆∞·ª£ng
                    if (newQuantity <= 0) {
                        JOptionPane.showMessageDialog(null, "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                        return; // Kh√¥ng c·∫≠p nh·∫≠t n·∫øu s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá
                    }
                    
                    // C·∫≠p nh·∫≠t gi√° tr·ªã
                    super.setValueAt(newQuantity, row, column);
                    
                    // T√≠nh l·∫°i th√†nh ti·ªÅn cho d√≤ng n√†y
                    Object priceObj = getValueAt(row, 4); // ƒê∆°n gi√°
                    if (priceObj != null) {
                        double price = priceObj instanceof Double ? (Double) priceObj : Double.parseDouble(priceObj.toString());
                        double itemTotal = newQuantity * price;
                        super.setValueAt(itemTotal, row, 5); // C·∫≠p nh·∫≠t th√†nh ti·ªÅn
                    }
                    
                    // C·∫≠p nh·∫≠t trong CartService
                    Integer productId = (Integer) getValueAt(row, 1);
                    if (productId != null) {
                        CartService.getInstance().updateQuantity(productId, newQuantity);
                    }
                    
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } else {
                super.setValueAt(value, row, column);
            }
            
            // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
            SwingUtilities.invokeLater(() -> updateTotal());
        }
    };

    cartTable = new JTable(tableModel);
    
    // ·∫®n c·ªôt Product ID
    cartTable.getColumnModel().getColumn(1).setMinWidth(0);
    cartTable.getColumnModel().getColumn(1).setMaxWidth(0);
    cartTable.getColumnModel().getColumn(1).setWidth(0);
    
    // FIX: ƒê·∫∑t editor cho c·ªôt s·ªë l∆∞·ª£ng ƒë·ªÉ d·ªÖ edit h∆°n
    cartTable.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(new JTextField()) {
        @Override
        public boolean stopCellEditing() {
            try {
                String value = (String) getCellEditorValue();
                int quantity = Integer.parseInt(value);
                if (quantity <= 0) {
                    JOptionPane.showMessageDialog(cartTable, "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(cartTable, "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            return super.stopCellEditing();
        }
    });
    
    // FIX: Th√™m listener ƒë·ªÉ b·∫Øt s·ª± ki·ªán thay ƒë·ªïi
    tableModel.addTableModelListener(e -> {
        if (e.getColumn() == 0) { // Ch·ªâ update t·ªïng khi thay ƒë·ªïi checkbox
            SwingUtilities.invokeLater(() -> updateTotal());
        }
        // Kh√¥ng c·∫ßn listener cho c·ªôt 3 v√¨ ƒë√£ x·ª≠ l√Ω trong setValueAt
    });

    JScrollPane scrollPane = new JScrollPane(cartTable);
    add(scrollPane, BorderLayout.CENTER);

    JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
    totalLabel = new JLabel("T·ªïng: 0 VNƒê");
    deleteButton = new JButton("X√≥a m·ª•c ƒë√£ ch·ªçn");
    orderButton = new JButton("ƒê·∫∑t h√†ng");

    deleteButton.addActionListener(e -> deleteSelectedItem());
    orderButton.addActionListener(e -> {
    // Ki·ªÉm tra c√≥ s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn kh√¥ng
    boolean hasSelection = false;
    double totalAmount = 0;
    
    for (int i = 0; i < tableModel.getRowCount(); i++) {
        Boolean selected = (Boolean) tableModel.getValueAt(i, 0);
        if (selected != null && selected) {
            hasSelection = true;
            Object totalObj = tableModel.getValueAt(i, 5);
            if (totalObj != null) {
                totalAmount += totalObj instanceof Double ? (Double) totalObj : Double.parseDouble(totalObj.toString());
            }
        }
    }

    if (!hasSelection) {
        JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ ƒë·∫∑t h√†ng!", "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (totalAmount <= 0) {
        JOptionPane.showMessageDialog(this, "T·ªïng ti·ªÅn ph·∫£i l·ªõn h∆°n 0!", "L·ªói", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // L∆∞u t·ªïng ti·ªÅn ƒë·ªÉ s·ª≠ d·ª•ng trong callback
    final double finalTotalAmount = totalAmount;
    
    // H·ªèi c√≥ mu·ªën tham gia v√≤ng quay may m·∫Øn kh√¥ng
    int choice = JOptionPane.showOptionDialog(
        this,
        "<html><center>" +
        "<h2>üéØ V√íNG QUAY MAY M·∫ÆN</h2>" +
        "<p>B·∫°n c√≥ mu·ªën tham gia v√≤ng quay may m·∫Øn ƒë·ªÉ nh·∫≠n m√£ gi·∫£m gi√° kh√¥ng?</p>" +
        "<p><b>T·ªïng ti·ªÅn hi·ªán t·∫°i: " + String.format("%.0f", totalAmount) + " VNƒê</b></p>" +
        "<br><b>Quy t·∫Øc:</b>" +
        "<li>‚Ä¢ C√≥ t·ªëi ƒëa 3 l∆∞·ª£t quay mi·ªÖn ph√≠</li>" +
        "<li>‚Ä¢ C∆° h·ªôi nh·∫≠n gi·∫£m gi√° t·ª´ 5% ƒë·∫øn 50%</li>" +
        "<li>‚Ä¢ C√≥ th·ªÉ d·ª´ng b·∫•t k·ª≥ l√∫c n√†o ƒë·ªÉ s·ª≠ d·ª•ng m√£ ƒë√£ c√≥</li>" +
        "<li>‚Ä¢ N·∫øu kh√¥ng tham gia s·∫Ω ƒë·∫∑t h√†ng v·ªõi gi√° g·ªëc</li>" +
        "</center></html>",
        "V√≤ng Quay May M·∫Øn",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE,
        null,
        new String[]{"üé≤ THAM GIA", "‚ùå B·ªé QUA"},
        "üé≤ THAM GIA"
    );
    
    if (choice == 0) { // Ch·ªçn tham gia
        // T·∫°o LuckyWheel v·ªõi callback
        LuckyWheel wheel = new LuckyWheel(new SpinResultCallback() {
            @Override
            public void onSpinComplete(String prizeLabel) {
                System.out.println("L·∫ßn quay v·ª´a r·ªìi: " + prizeLabel);
            }
            
            @Override
            public void onAllSpinsCompleted(String finalPrizeLabel) {
                float discount = 0f;
                if (finalPrizeLabel != null && finalPrizeLabel.endsWith("%")) {
                    System.out.println("Nh·∫≠n ƒë∆∞·ª£c gi·∫£m gi√° cu·ªëi c√πng: " + finalPrizeLabel);
                    String discountStr = finalPrizeLabel.replace("%", "");
                    discount = Float.parseFloat(discountStr) / 100f;
                }
                
                // X√°c nh·∫≠n ƒë·∫∑t h√†ng v·ªõi gi·∫£m gi√°
                double discountAmount = finalTotalAmount * discount;
                double finalAmount = finalTotalAmount - discountAmount;
                
                String confirmMessage = discount > 0 ? 
                    String.format("X√°c nh·∫≠n ƒë·∫∑t h√†ng:\n" +
                                "T·ªïng ti·ªÅn g·ªëc: %.0f VNƒê\n" +
                                "Gi·∫£m gi√° (%s): -%.0f VNƒê\n" +
                                "Th√†nh ti·ªÅn: %.0f VNƒê", 
                                finalTotalAmount, finalPrizeLabel, discountAmount, finalAmount) :
                    String.format("X√°c nh·∫≠n ƒë·∫∑t h√†ng v·ªõi t·ªïng ti·ªÅn: %.0f VNƒê", finalTotalAmount);
                
                int confirm = JOptionPane.showConfirmDialog(
                    CartView.this, 
                    confirmMessage, 
                    "X√°c nh·∫≠n ƒë·∫∑t h√†ng", 
                    JOptionPane.YES_NO_OPTION
                );
                
                if (confirm == JOptionPane.YES_OPTION) {
                    // G·ªçi ph∆∞∆°ng th·ª©c ƒë·∫∑t h√†ng v·ªõi gi·∫£m gi√°
                    placeSelectedOrdersWithDiscount(discount, finalPrizeLabel != null ? finalPrizeLabel : "Kh√¥ng c√≥ gi·∫£m gi√°");
                }
            }
        });
        
        wheel.setVisible(true);
        
    } else { // Ch·ªçn b·ªè qua - ƒë·∫∑t h√†ng ngay
        // X√°c nh·∫≠n ƒë·∫∑t h√†ng b√¨nh th∆∞·ªùng
        int confirm = JOptionPane.showConfirmDialog(this, 
            "X√°c nh·∫≠n ƒë·∫∑t h√†ng v·ªõi t·ªïng ti·ªÅn: " + String.format("%.0f", totalAmount) + " VNƒê?", 
            "X√°c nh·∫≠n ƒë·∫∑t h√†ng", 
            JOptionPane.YES_NO_OPTION);
            
        if (confirm == JOptionPane.YES_OPTION) {
            placeSelectedOrdersWithDiscount(0f, "Kh√¥ng c√≥ gi·∫£m gi√°");
        }
    }
});

    bottomPanel.add(totalLabel);
    bottomPanel.add(deleteButton);
    bottomPanel.add(orderButton);

    add(bottomPanel, BorderLayout.SOUTH);

    refreshCart();
}

    public void refreshCart() {
        try {
            cartItems = CartService.getInstance().getCartItems();
            tableModel.setRowCount(0);
            for (CartItem item : cartItems) {
                tableModel.addRow(new Object[]{
                    false, // m·∫∑c ƒë·ªãnh ch∆∞a ch·ªçn
                    item.getProductId(), // Product ID (·∫©n)
                    item.getProductName(),
                    item.getQuantity(),
                    item.getUnitPrice(),
                    item.getTotalPrice()
                });
            }
            updateTotal();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi t·∫£i gi·ªè h√†ng: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void deleteSelectedItem() {
        try {
            boolean hasSelection = false;
            
            // Ki·ªÉm tra xem c√≥ item n√†o ƒë∆∞·ª£c ch·ªçn kh√¥ng
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                Boolean selected = (Boolean) tableModel.getValueAt(i, 0);
                if (selected != null && selected) {
                    hasSelection = true;
                    break;
                }
            }
            
            if (!hasSelection) {
                JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn s·∫£n ph·∫©m c·∫ßn x√≥a!", "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // X√°c nh·∫≠n x√≥a
            int confirm = JOptionPane.showConfirmDialog(this, 
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn?", 
                "X√°c nh·∫≠n x√≥a", 
                JOptionPane.YES_NO_OPTION);
                
            if (confirm != JOptionPane.YES_OPTION) {
                return;
            }
            
            // X√≥a c√°c item ƒë√£ ch·ªçn (duy·ªát ng∆∞·ª£c ƒë·ªÉ tr√°nh l·ªói index)
            for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {
                Boolean selected = (Boolean) tableModel.getValueAt(i, 0);
                if (selected != null && selected) {
                    try {
                        Integer productId = (Integer) tableModel.getValueAt(i, 1); // C·ªôt 1: Product ID
                        if (productId != null) {
                            CartService.getInstance().removeFromCart(productId);
                        }
                    } catch (ClassCastException e) {
                        System.err.println("L·ªói cast Product ID t·∫°i d√≤ng " + i + ": " + e.getMessage());
                    }
                }
            }
            
            refreshCart();
            JOptionPane.showMessageDialog(this, "ƒê√£ x√≥a c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi x√≥a s·∫£n ph·∫©m: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

   // Thay th·∫ø method updateTotal() trong CartView b·∫±ng version n√†y:

private void updateTotal() {
    try {
        double total = 0;
        
        // Ch·ªâ t√≠nh t·ªïng c√°c item ƒë∆∞·ª£c ch·ªçn
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            try {
                Boolean selected = (Boolean) tableModel.getValueAt(i, 0);
                if (selected != null && selected) {
                    Object totalObj = tableModel.getValueAt(i, 5); // C·ªôt 5: Th√†nh ti·ªÅn
                    if (totalObj != null) {
                        double itemTotal = totalObj instanceof Double ? (Double) totalObj : Double.parseDouble(totalObj.toString());
                        total += itemTotal;
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói t√≠nh t·ªïng t·∫°i d√≤ng " + i + ": " + e.getMessage());
            }
        }

        totalLabel.setText("T·ªïng: " + String.format("%.0f", total) + " VNƒê");
        
    } catch (Exception e) {
        System.err.println("L·ªói trong updateTotal(): " + e.getMessage());
        totalLabel.setText("T·ªïng: 0 VNƒê");
    }
}

 // Ph∆∞∆°ng th·ª©c ƒë·∫∑t h√†ng v·ªõi gi·∫£m gi√° (ƒë√£ c·∫≠p nh·∫≠t theo database hi·ªán t·∫°i)
private void placeSelectedOrdersWithDiscount(float discountPercent, String discountInfo) {
    Connection con = null;
    try {
        // T√≠nh to√°n t·ªïng ti·ªÅn g·ªëc
        double originalTotal = 0;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            Boolean selected = (Boolean) tableModel.getValueAt(i, 0);
            if (selected != null && selected) {
                Object totalObj = tableModel.getValueAt(i, 5);
                if (totalObj != null) {
                    originalTotal += totalObj instanceof Double ? (Double) totalObj : Double.parseDouble(totalObj.toString());
                }
            }
        }
        
        // √Åp d·ª•ng gi·∫£m gi√°
        double discountAmount = originalTotal * discountPercent;
        double finalTotal = originalTotal - discountAmount;

        con = DataBaseConfig.getConnection();
        con.setAutoCommit(false); // B·∫Øt ƒë·∫ßu transaction
        
        String orderId = OrderUtils.generateOrderID(AuthUtils.getCurrentUserName(), AuthUtils.getCurrentUserId());

        // T·∫°o ƒë∆°n h√†ng v·ªõi th√¥ng tin gi·∫£m gi√° - KH√îNG s·ª≠ d·ª•ng OUTPUT INSERTED
        String insertOrder = "INSERT INTO Orders (Order_Id, User_ID, Order_Date, Total_Amount, Original_Amount, Discount_Percent, Discount_Info) VALUES (?, ?, GETDATE(), ?, ?, ?, ?)";
        try (PreparedStatement stmt = con.prepareStatement(insertOrder)) {
            stmt.setString(1, orderId);
            stmt.setInt(2, AuthUtils.getCurrentUserId());
            stmt.setDouble(3, finalTotal);
            stmt.setDouble(4, originalTotal);
            stmt.setFloat(5, discountPercent * 100); // L∆∞u ph·∫ßn trƒÉm (v√≠ d·ª•: 15.0 cho 15%)
            stmt.setString(6, discountInfo);
            stmt.executeUpdate();
        }

        // Th√™m chi ti·∫øt ƒë∆°n h√†ng v√† c·∫≠p nh·∫≠t t·ªìn kho
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            Boolean selected = (Boolean) tableModel.getValueAt(i, 0);
            if (selected != null && selected) {
                try {
                    Integer productId = (Integer) tableModel.getValueAt(i, 1);  // C·ªôt 1: Product ID
                    Object quantityObj = tableModel.getValueAt(i, 3);          // C·ªôt 3: S·ªë l∆∞·ª£ng
                    Object priceObj = tableModel.getValueAt(i, 4);             // C·ªôt 4: ƒê∆°n gi√°
                    
                    if (productId == null || quantityObj == null || priceObj == null) {
                        continue;
                    }
                    
                    int quantity = quantityObj instanceof Integer ? (Integer) quantityObj : Integer.parseInt(quantityObj.toString());
                    double unitPrice = priceObj instanceof Double ? (Double) priceObj : Double.parseDouble(priceObj.toString());
                    
                    if (quantity <= 0) {
                        continue;
                    }

                    // Ki·ªÉm tra t·ªìn kho tr∆∞·ªõc khi ƒë·∫∑t h√†ng
                    String checkStock = "SELECT Quantity FROM Products WHERE Product_ID = ?";
                    try (PreparedStatement checkStmt = con.prepareStatement(checkStock)) {
                        checkStmt.setInt(1, productId);
                        ResultSet rs = checkStmt.executeQuery();
                        if (rs.next()) {
                            int availableStock = rs.getInt("Quantity");
                            if (availableStock < quantity) {
                                con.rollback();
                                JOptionPane.showMessageDialog(this, 
                                    "S·∫£n ph·∫©m \"" + tableModel.getValueAt(i, 2) + "\" kh√¥ng ƒë·ªß h√†ng!\n" +
                                    "T·ªìn kho: " + availableStock + ", Y√™u c·∫ßu: " + quantity, 
                                    "L·ªói t·ªìn kho", JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                        } else {
                            con.rollback();
                            JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ID: " + productId, "L·ªói", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }

                    // Th√™m chi ti·∫øt ƒë∆°n h√†ng - gi·ªØ nguy√™n nh∆∞ code g·ªëc
                    String insertDetail = "INSERT INTO OrderDetails (Order_ID, Product_ID, Quantity, Unit_Price) VALUES (?, ?, ?, ?)";
                    try (PreparedStatement stmt = con.prepareStatement(insertDetail)) {
                        stmt.setString(1, orderId);
                        stmt.setInt(2, productId);
                        stmt.setInt(3, quantity);
                        stmt.setDouble(4, unitPrice);
                        stmt.executeUpdate();
                    }

                    // C·∫≠p nh·∫≠t t·ªìn kho
                    String updateQuantity = "UPDATE Products SET Quantity = Quantity - ? WHERE Product_ID = ?";
                    try (PreparedStatement stmt = con.prepareStatement(updateQuantity)) {
                        stmt.setInt(1, quantity);
                        stmt.setInt(2, productId);
                        stmt.executeUpdate();
                    }

                    // X√≥a kh·ªèi gi·ªè h√†ng
                    CartService.getInstance().removeFromCart(productId);
                    
                } catch (NumberFormatException e) {
                    System.err.println("L·ªói parse d·ªØ li·ªáu t·∫°i d√≤ng " + i + ": " + e.getMessage());
                    continue;
                }
            }
        }

        con.commit(); // Commit transaction
        
        // Th√¥ng b√°o th√†nh c√¥ng v·ªõi th√¥ng tin gi·∫£m gi√°
        String successMessage = discountPercent > 0 ? 
            String.format("üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng!\n\n" +
                         "üí∞ T·ªïng ti·ªÅn g·ªëc: %.0f VNƒê\n" +
                         "üéÅ Gi·∫£m gi√°: %.0f VNƒê (%.0f%%)\n" +
                         "üí≥ Th√†nh ti·ªÅn: %.0f VNƒê\n" +
                         "üéØ M√£ gi·∫£m gi√°: %s", 
                         originalTotal, discountAmount, discountPercent * 100, finalTotal, discountInfo) :
            "‚úÖ ƒê·∫∑t h√†ng th√†nh c√¥ng!";
            
        JOptionPane.showMessageDialog(this, successMessage, "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
        
        // Hi·ªÉn th·ªã h√≥a ƒë∆°n
        try {
            new InvoiceView(orderId, AuthUtils.getCurrentUserName());
        } catch (Exception e) {
            System.err.println("L·ªói hi·ªÉn th·ªã h√≥a ƒë∆°n: " + e.getMessage());
        }
        
        refreshCart();

    } catch (SQLException ex) {
        try {
            if (con != null) {
                con.rollback();
            }
        } catch (SQLException rollbackEx) {
            rollbackEx.printStackTrace();
        }
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "L·ªói database khi ƒë·∫∑t h√†ng: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        try {
            if (con != null) {
                con.rollback();
            }
        } catch (SQLException rollbackEx) {
            rollbackEx.printStackTrace();
        }
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "L·ªói kh√¥ng x√°c ƒë·ªãnh: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (con != null) {
                con.setAutoCommit(true);
                con.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}

// Query ƒë·ªÉ xem l·ªãch s·ª≠ ƒë∆°n h√†ng c√≥ gi·∫£m gi√° (ƒë·ªÉ test)
public void viewOrderHistory() {
    String query = """
        SELECT 
            o.Order_ID,
            o.Order_Date,
            o.Original_Amount,
            o.Total_Amount,
            o.Discount_Percent,
            o.Discount_Info,
            (o.Original_Amount - o.Total_Amount) AS Discount_Amount
        FROM Orders o
        WHERE o.User_ID = ?
        ORDER BY o.Order_Date DESC
        """;
    
    // Implementation ƒë·ªÉ hi·ªÉn th·ªã l·ªãch s·ª≠...
}
}